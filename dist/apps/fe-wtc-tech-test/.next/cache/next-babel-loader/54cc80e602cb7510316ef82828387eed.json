{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\n\nvar Home = function Home() {\n  return __jsx(\"main\", null, __jsx(\"h1\", null, \"Edit apps/fe-wtc-tech-test/pages/index.tsx and save to reload.\"), __jsx(\"h2\", null, \"Click on the instructions button to understand what to do\"));\n};\n\n_c2 = Home;\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/Users/jdslima/Desktop/wtcomm-fe-tech-test-Jon-Souzal/apps/fe-wtc-tech-test/pages/index.tsx"],"names":["Home"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,SACE,KAAA,CAAA,MAAA,EAAA,IAAA,EACE,KAAA,CAAA,IAAA,EAAA,IAAA,EADF,gEACE,CADF,EAEE,KAAA,CAAA,IAAA,EAAA,IAAA,EAHJ,2DAGI,CAFF,CADF;AADF,CAAA;;MAAMA,I;KAAAA,I;AASN,eAAA,IAAA","sourcesContent":["import React from 'react';\n\nconst Home = () => {\n  return (\n    <main>\n      <h1>Edit apps/fe-wtc-tech-test/pages/index.tsx and save to reload.</h1>\n      <h2>Click on the instructions button to understand what to do</h2>\n    </main>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}