{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { DetailsBox } from '@mono-nx-test-with-nextjs/ui';\nexport var Tasks = function Tasks(_ref) {\n  var children = _ref.children,\n      summary = _ref.summary,\n      _ref$extraTasks = _ref.extraTasks,\n      extraTasks = _ref$extraTasks === void 0 ? null : _ref$extraTasks,\n      _ref$additionalInfo = _ref.additionalInfo,\n      additionalInfo = _ref$additionalInfo === void 0 ? null : _ref$additionalInfo;\n  return __jsx(DetailsBox, {\n    summaryDescription: summary\n  }, children, extraTasks && extraTasks.map(function (task) {\n    return task;\n  }), __jsx(Notes, {\n    additionalInfo: additionalInfo\n  }));\n};\n_c4 = Tasks;\n_c = Tasks;\nexport var Notes = function Notes(_ref2) {\n  var _ref2$additionalInfo = _ref2.additionalInfo,\n      additionalInfo = _ref2$additionalInfo === void 0 ? null : _ref2$additionalInfo;\n  return __jsx(React.Fragment, null, __jsx(\"h5\", null, \"Notes & useful links:\"), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"a\", {\n    href: \"/assets/design/fe_movies_tech_test.pdf\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"Design\")), __jsx(\"li\", null, __jsx(\"a\", {\n    href: \"http://localhost:3333/swagger-doc\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"API swagger doc\")), additionalInfo && additionalInfo.map(function (info) {\n    return __jsx(\"li\", {\n      key: info\n    }, info);\n  })));\n};\n_c5 = Notes;\n_c2 = Notes;\nexport var FetchAllMovies = function FetchAllMovies(_ref3) {\n  var _ref3$extraTasks = _ref3.extraTasks,\n      extraTasks = _ref3$extraTasks === void 0 ? [] : _ref3$extraTasks;\n  return __jsx(Tasks, {\n    summary: \"Fetch all movies\"\n  }, __jsx(\"p\", null, \"As a user, I want to see the list of all movies, so I can see what is available. At the top of the page, I want to see the total number of movies fetched.\"), __jsx(\"p\", null, \"As a user, I want to be able to see a movie represented as a card which has the movie's poster in the center and its rating at the bottom.\"), __jsx(\"p\", null, \"The rating is calculated as the average of the 3 values present in the \\\"Ratings\\\" property (from the API).\"), __jsx(\"pre\", null, '3 <= rating <= 3.49    -----> 3 stars'), __jsx(\"pre\", null, '3.50 <= rating <= 3.99 -----> 3.5 stars'), __jsx(\"h5\", null, \"Tasks\"), __jsx(\"ol\", null, __jsx(\"li\", null, __jsx(\"p\", null, \"Fetch the list of movies from the API\")), __jsx(\"li\", null, __jsx(\"p\", null, \"Create the card component\")), extraTasks && extraTasks.map(function (task, index) {\n    return __jsx(\"li\", {\n      key: index\n    }, task);\n  })));\n};\n_c6 = FetchAllMovies;\n_c3 = FetchAllMovies;\nexport var CardsState = __jsx(\"div\", {\n  key: 'cardsState'\n}, __jsx(\"p\", null, \"At the top of the card, I want 2 icons that will allow me to save a movie in my watch list and keep track of which movie I have already seen. Additionally, upon clicking, the background's color of the movie's card will change, so I can use colors to easily identify their states.\"), __jsx(\"b\", null, __jsx(\"p\", null, \"There are 4 different states:\")), __jsx(\"ol\", null, __jsx(\"li\", null, __jsx(\"ul\", null, __jsx(\"li\", null, \"Watched: false\"), __jsx(\"li\", null, \"Saved: false\"), __jsx(\"li\", null, \"Background color: #FFF\"))), __jsx(\"li\", null, __jsx(\"ul\", null, __jsx(\"li\", null, \"Watched: false\"), __jsx(\"li\", null, \"Saved:true\"), __jsx(\"li\", null, \"Background color: #ED6606\"))), __jsx(\"li\", null, __jsx(\"ul\", null, __jsx(\"li\", null, \"Watched: true\"), __jsx(\"li\", null, \"Saved: false\"), __jsx(\"li\", null, \"Background color: #EEC907\"))), __jsx(\"li\", null, __jsx(\"ul\", null, __jsx(\"li\", null, \"Watched: true\"), __jsx(\"li\", null, \"Saved: true\"), __jsx(\"li\", null, \"Background color: #049452\")))));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Tasks\");\n$RefreshReg$(_c2, \"Notes\");\n$RefreshReg$(_c3, \"FetchAllMovies\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c4, _c5, _c6;\n\n$RefreshReg$(_c4, \"Tasks\");\n$RefreshReg$(_c5, \"Notes\");\n$RefreshReg$(_c6, \"FetchAllMovies\");","map":{"version":3,"sources":["/Users/jdslima/Desktop/wtcomm-fe-tech-test-Jon-Souzal/apps/instructions/app/components/tests/common.tsx"],"names":["Tasks","children","summary","extraTasks","additionalInfo","Notes","info","FetchAllMovies","index","CardsState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DetailsBox } from '@mono-nx-test-with-nextjs/ui';\n\nexport const Tasks = ({\n  children,\n  summary,\n  extraTasks = null,\n  additionalInfo = null,\n}) => (\n  <DetailsBox summaryDescription={summary}>\n    {children}\n    {extraTasks && extraTasks.map((task) => task)}\n    <Notes additionalInfo={additionalInfo} />\n  </DetailsBox>\n);\n\nexport const Notes = ({ additionalInfo = null }) => {\n  return (\n    <>\n      <h5>Notes & useful links:</h5>\n      <ul>\n        <li>\n          <a\n            href=\"/assets/design/fe_movies_tech_test.pdf\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Design\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"http://localhost:3333/swagger-doc\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            API swagger doc\n          </a>\n        </li>\n        {additionalInfo &&\n          additionalInfo.map((info) => <li key={info}>{info}</li>)}\n      </ul>\n    </>\n  );\n};\n\nexport const FetchAllMovies = ({ extraTasks = [] }) => {\n  return (\n    <Tasks summary={`Fetch all movies`}>\n      <p>\n        As a user, I want to see the list of all movies, so I can see what is\n        available. At the top of the page, I want to see the total number of\n        movies fetched.\n      </p>\n      <p>\n        As a user, I want to be able to see a movie represented as a card which\n        has the movie's poster in the center and its rating at the bottom.\n      </p>\n      <p>\n        The rating is calculated as the average of the 3 values present in the\n        \"Ratings\" property (from the API).\n      </p>\n      <pre>{'3 <= rating <= 3.49    -----> 3 stars'}</pre>\n      <pre>{'3.50 <= rating <= 3.99 -----> 3.5 stars'}</pre>\n      <h5>Tasks</h5>\n      <ol>\n        <li>\n          <p>Fetch the list of movies from the API</p>\n        </li>\n        <li>\n          <p>Create the card component</p>\n        </li>\n        {extraTasks &&\n          extraTasks.map((task, index) => <li key={index}>{task}</li>)}\n      </ol>\n    </Tasks>\n  );\n};\n\nexport const CardsState = (\n  <div key={'cardsState'}>\n    <p>\n      At the top of the card, I want 2 icons that will allow me to save a movie\n      in my watch list and keep track of which movie I have already seen.\n      Additionally, upon clicking, the background's color of the movie's card\n      will change, so I can use colors to easily identify their states.\n    </p>\n    <b>\n      <p>There are 4 different states:</p>\n    </b>\n    <ol>\n      <li>\n        <ul>\n          <li>Watched: false</li>\n          <li>Saved: false</li>\n          <li>Background color: #FFF</li>\n        </ul>\n      </li>\n      <li>\n        <ul>\n          <li>Watched: false</li>\n          <li>Saved:true</li>\n          <li>Background color: #ED6606</li>\n        </ul>\n      </li>\n      <li>\n        <ul>\n          <li>Watched: true</li>\n          <li>Saved: false</li>\n          <li>Background color: #EEC907</li>\n        </ul>\n      </li>\n      <li>\n        <ul>\n          <li>Watched: true</li>\n          <li>Saved: true</li>\n          <li>Background color: #049452</li>\n        </ul>\n      </li>\n    </ol>\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}