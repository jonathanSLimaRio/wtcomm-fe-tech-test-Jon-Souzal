{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DetailsBox } from '@mono-nx-test-with-nextjs/ui';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { TESTS_NUMBERS } from '../tests';\nimport { ANGULAR, ANGULARV2, REACT } from '@mono-nx-test-with-nextjs/common/frameworks';\nimport ANSWERS from '../../../../../butler/.tmp/answers.json';\nimport LINKS from '@mono-nx-test-with-nextjs/common/links';\nvar instructionsUrl = LINKS.Instructions.href,\n    feUrl = LINKS.Application.href,\n    apiUrl = LINKS.Api.href,\n    swaggerUrl = LINKS.Swagger.href,\n    designUrl = LINKS.Design.href;\nvar useStyles = makeStyles(function () {\n  return createStyles({\n    code: {\n      background: '#001628',\n      color: '#00FF41',\n      padding: '20px',\n      borderRadius: '10px',\n      margin: '30px 0',\n      display: 'block',\n      fontSize: '1rem'\n    }\n  });\n});\nvar listOfAllowedComponents = ['Grid', 'Progress', 'Buttons', 'material-icons', 'Typography', 'Paper'];\n\nvar Emoji = function Emoji(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 30 : _ref$size;\n  return __jsx(\"span\", {\n    style: {\n      fontSize: \"\".concat(size, \"px\")\n    }\n  }, children);\n};\n\n_c = Emoji;\n\nvar CodeBlock = function CodeBlock(_ref2) {\n  _s();\n\n  var children = _ref2.children;\n  var classes = useStyles();\n  return __jsx(\"code\", {\n    className: classes.code\n  }, children);\n};\n\n_s(CodeBlock, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = CodeBlock;\n\nvar ExternalLink = function ExternalLink(_ref3) {\n  var href = _ref3.href,\n      children = _ref3.children;\n  return __jsx(\"a\", {\n    href: href,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, children);\n};\n\n_c3 = ExternalLink;\n\nvar getInstructionsBasedOnFramework = function getInstructionsBasedOnFramework(framework) {\n  switch (framework) {\n    case ANGULAR:\n      return __jsx(React.Fragment, null, __jsx(\"ul\", null, __jsx(\"li\", null, \"A FE application in angularjs (apps/angularjs)\"), __jsx(\"li\", null, \"An Express API (apps/api)\")), __jsx(\"p\", null, \"At the moment, there isn't any component library for angularjs, if you'd like, you can use any UI framework (i.e. Bootstrap, tailwind etc.).\"));\n\n    case ANGULARV2:\n      return __jsx(React.Fragment, null, __jsx(\"ul\", null, __jsx(\"li\", null, \"A FE application in Angular V2 (apps/fe-wtc-tech-test-angularv2)\"), __jsx(\"li\", null, \"An Express API (apps/api)\"), __jsx(\"li\", null, \"E2E tests (apps/fe-wtc-tech-test-angularv2-e2e)\")), __jsx(\"p\", null, \"At the moment, there isn't any component library for angularjs, if you'd like, you can use any UI frameworks (i.e. Bootstrap, tailwind etc.).\"));\n\n    case REACT:\n      return __jsx(\"section\", null, __jsx(\"ul\", null, __jsx(\"li\", null, \"A FE application in Next.js (apps/fe-wtc-tech-test)\"), __jsx(\"li\", null, \"A React library of components (libs/ui)\"), __jsx(\"li\", null, \"An Express API (apps/api)\"), __jsx(\"li\", null, \"E2E tests (apps/fe-wtc-tech-test-e2e)\")), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"h4\", null, __jsx(\"b\", null, \"In order to speed up development\")), __jsx(\"p\", null, \"If you'd like, you can use, change or extend components already present in the ui library. Those we have included, are just a wrapper around the Material UI one, nothing more. You can import them in this way:\"), __jsx(\"p\", null, __jsx(CodeBlock, null, \"import { Button, Progress } from '@mono-nx-test-with-nextjs/ui';\")), __jsx(\"p\", null, \"Same thing for icons. They can be imported directly as a normal component from the library as:\"), __jsx(\"p\", null, __jsx(CodeBlock, null, \"import {VisibilityIcon} from '@mono-nx-test-with-nextjs/ui';\")), __jsx(\"p\", null, \"This is the list of the original Material UI components we wrapped:\"), __jsx(\"ul\", null, listOfAllowedComponents.map(function (componentName) {\n        return __jsx(\"li\", {\n          key: componentName\n        }, __jsx(ExternalLink, {\n          href: \"https://material-ui.com/components/\".concat(componentName, \"/\")\n        }, componentName));\n      })), __jsx(\"p\", null, \"You can also use Material UI Utils.\"), __jsx(\"b\", null, __jsx(\"p\", null, __jsx(\"b\", null, \"Nothing else is allowed from Material UI or extra UI framework (i.e. Bootstrap). We want you to create new components.\"))))));\n\n    default:\n      break;\n  }\n};\n\nvar Instructions = function Instructions() {\n  var testNumber = ANSWERS === null || ANSWERS === void 0 ? void 0 : ANSWERS.testNumber.split(' - ')[0];\n  var testInstructions = null;\n  var testTitle = null;\n\n  if (testNumber) {\n    var _TESTS_NUMBERS = TESTS_NUMBERS[Number(testNumber) - 1],\n        test = _TESTS_NUMBERS.test,\n        title = _TESTS_NUMBERS.title;\n    testInstructions = test;\n    testTitle = title;\n  }\n\n  return __jsx(\"main\", null, __jsx(\"h1\", null, \"Instructions\"), __jsx(\"p\", null, \"The idea of this test is to give you something which is as close as possible to a real situation where you have to implement some user stories in a codebase. We believe this is the best way to evaluate a candidate because this is what you will do if you get the job. Hopefully, you will find this test challenging and fun. We do appreciate any feedback, good or bad you might have. Do not hesitate to let us know what you think! Help us improve!\"), __jsx(\"p\", null, \"Let's begin...\"), __jsx(\"p\", null, \"This codebase is a mono-repo. At the moment you will find:\"), ANSWERS && getInstructionsBasedOnFramework(ANSWERS === null || ANSWERS === void 0 ? void 0 : ANSWERS.framework), __jsx(\"p\", null, \"The FE application is already connected to the API (swagger below), so you don't need to worry about that. But there is also a shared library of components which you might want to use. Imagine this a real situation, so when you create a new component, you need to think where to put it. Does it belong to a share component library or in the application?\"), __jsx(\"p\", null, \"Remember, the API is not persistent, so every time you make a change with PUT etc. it will be saved until you restart.\"), __jsx(\"p\", null, __jsx(\"b\", null, \"Somebody should have told you which test to do, if you are not sure, please reach out to your recruiter and ask.\")), __jsx(\"p\", null, \"We are expecting people at any level to be able to delivery any of the below tests. There is no time limit, so you can relax and get it done when you can, it will take you only a few hours. The actual implementation will help us to assess your level more accurately. If we do not like your implementation or how you code and you fail the test, this doesn't make you a bad coder, it is just our own opinion, don't take it personally, we can also make mistakes.\"), __jsx(\"h2\", null, testNumber ? 'TEST' : \"TESTS (if you don't know the number, please ask your recruiter)\"), testNumber ? __jsx(\"div\", null, __jsx(\"h3\", null, \"Test \", ANSWERS.testNumber, \": \", __jsx(\"b\", null, testTitle)), __jsx(\"h4\", null, \"User Stories\"), testInstructions) : // fallback in case there is something wrong with the answers file\n  TESTS_NUMBERS.map(function (_ref4, index) {\n    var test = _ref4.test,\n        title = _ref4.title;\n    return __jsx(\"div\", {\n      key: title\n    }, __jsx(\"h3\", null, \"Test \", index + 1, \": \", __jsx(\"b\", null, title)), __jsx(\"h4\", null, \"User Stories\"), test);\n  }), __jsx(\"hr\", null), __jsx(\"h3\", null, \"The git bit\"), __jsx(\"p\", null, \"When you commit your code, you need to follow this patter:\"), __jsx(\"p\", null, \"user story userStoryNumber.taskNumber. For instance:\"), __jsx(\"p\", null, \"user story 1.1 \", '=>', \" if you are working on user story 1 task 1\"), __jsx(\"p\", null, \"user story 1.2 \", '=>', \" if you are working on user story 1 task 2\"), __jsx(\"p\", null, \"When you think you are ready for us to review your work, just push your code up and send an email to your recruiter. You can push even if you are not ready yet, we won't review it until you say it is.\"), __jsx(\"hr\", null), __jsx(DetailsBox, {\n    summaryDescription: \"What we check when grading your solution\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \"If your solution meets accessibility standards (at least level A)\"), __jsx(\"li\", null, \"If your solution meets security standards\"), __jsx(\"li\", null, \"If your solution produces any errors or messages in the console\"), __jsx(\"li\", null, \"How your solution handles application errors\"), __jsx(\"li\", null, \"How much your solution follows our instructions\"), __jsx(\"li\", null, \"If you use any third-parties and why\"), __jsx(\"li\", null, \"How you structure your code\"), __jsx(\"li\", null, \"How clean your code is\"), __jsx(\"li\", null, \"Your attention to details\"), __jsx(\"li\", null, \"How close to the design your solution is\"), __jsx(\"li\", null, \"How you write typescript\"), __jsx(\"li\", null, \"If your solution runs on our machine after following your instructions (if you change anything and diverge from the default behavior)\"))), __jsx(DetailsBox, {\n    summaryDescription: \"What we DON'T check when grading your solution:\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \"What you choose as CSS methods (BEM, SMACSS, OOCSS, etc.)\"), __jsx(\"li\", null, \"What you choose as CSS \\\"tools\\\" (less, sass, CSS-in-JS)\"), __jsx(\"li\", null, \"If you add extra functionalities but you don't do 100% of what requested. If you want to impress us, follow our instructions and do things properly (add all the required tests!), that is enough.\"), __jsx(\"li\", null, \"The time you spend on it\"))), __jsx(\"hr\", null), __jsx(\"h3\", null, \"Requirements\"), __jsx(\"ul\", null, __jsx(\"li\", null, \"Your solution should be responsive\"), __jsx(\"li\", null, \"Your solution should work on all the latest 2 versions of modern browsers:\", __jsx(\"ul\", null, __jsx(\"li\", null, \"Chrome\"), __jsx(\"li\", null, \"Safari\"), __jsx(\"li\", null, \"Firefox\"), __jsx(\"li\", null, \"Edge\")), __jsx(\"p\", null, __jsx(\"b\", null, \"What about Explorer 11? If your solution supports it, great! Let us know and we will give you extra points, but it is not required.\"))), __jsx(\"li\", null, \"Your solution should handle application errors (No data from API, no images, etc.)\"), __jsx(\"li\", null, \"You can add other things if you require to (lodash modules, ramda, Redux etc.). If you do, we want to know why.\"), __jsx(\"li\", null, \"Your solution should include MEANINGFUL tests which test some or all the application's logic. Snapshots tests are fine for presentational components, but they might not be enough in other scenarios. We want to see how you test application logic, we give for granted that you know how to write snapshots tests. We want to know if you understand the difference between unit, integration and end-2-end tests and how you approach it.\"), __jsx(\"li\", null, \"if you diverge from the default behavior of this repo, you should add at the top or the readme file the new instructions. Please be clear.\")), __jsx(\"h3\", null, \"Notes:\"), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"p\", null, \"Where you are now is where the instructions \", __jsx(Emoji, null, \" \\u2699\"), ' ', \"page is:\", ' ', __jsx(ExternalLink, {\n    href: instructionsUrl\n  }, instructionsUrl), '. ', \"You can always come back here anytime, just click on the button in the footer. \", __jsx(Emoji, null, \"\\uD83D\\uDC47\")), __jsx(\"p\", null, \"The FE application home is exposed at:\", ' ', __jsx(ExternalLink, {\n    href: feUrl\n  }, feUrl)), __jsx(\"p\", null, \"The FE application home is where you need to put your code!\")), __jsx(\"li\", null, \"The API is exposed at http://localhost:3333.\", __jsx(\"p\", null, \"API's endpoint example (movies):\", ' ', __jsx(ExternalLink, {\n    href: apiUrl\n  }, apiUrl)), __jsx(\"p\", null, __jsx(ExternalLink, {\n    href: swaggerUrl\n  }, \"API swagger doc\")), __jsx(\"p\", null, __jsx(\"b\", null, \"Remember, you can actually hit the endpoints from the swagger doc to see the data. Click on \\\"Try it out\\\" and then execute. You can also play around with params.\"))), __jsx(\"li\", null, __jsx(\"p\", null, __jsx(ExternalLink, {\n    href: designUrl\n  }, \"Design\"))), __jsx(\"li\", null, \"To run the unit tests use this command:\", __jsx(\"p\", null, \"yarn test:\".concat(ANSWERS && (ANSWERS === null || ANSWERS === void 0 ? void 0 : ANSWERS.framework.toLocaleLowerCase()))))), __jsx(\"p\", null, \"That's it!! Now you can start. We hope you will enjoy this challenge and good luck!\"), __jsx(\"p\", null, __jsx(\"b\", null, \"01001000 01100001 01110000 01110000 01111001 00100000 01100011 01101111 01100100 01101001 01101110 01100111 00100001\")));\n};\n\n_c4 = Instructions;\nexport default Instructions;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Emoji\");\n$RefreshReg$(_c2, \"CodeBlock\");\n$RefreshReg$(_c3, \"ExternalLink\");\n$RefreshReg$(_c4, \"Instructions\");","map":{"version":3,"sources":["/Users/jdslima/Desktop/wtcomm-fe-tech-test-Jon-Souzal/apps/instructions/app/components/instructions/index.tsx"],"names":["React","DetailsBox","makeStyles","createStyles","TESTS_NUMBERS","ANGULAR","ANGULARV2","REACT","ANSWERS","LINKS","instructionsUrl","Instructions","href","feUrl","Application","apiUrl","Api","swaggerUrl","Swagger","designUrl","Design","useStyles","code","background","color","padding","borderRadius","margin","display","fontSize","listOfAllowedComponents","Emoji","children","size","CodeBlock","classes","ExternalLink","getInstructionsBasedOnFramework","framework","map","componentName","testNumber","split","testInstructions","testTitle","Number","test","title","index","toLocaleLowerCase"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DetailsBox } from '@mono-nx-test-with-nextjs/ui';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { TESTS_NUMBERS } from '../tests';\nimport {\n  ANGULAR,\n  ANGULARV2,\n  REACT,\n} from '@mono-nx-test-with-nextjs/common/frameworks';\nimport ANSWERS from '../../../../../butler/.tmp/answers.json';\nimport LINKS from '@mono-nx-test-with-nextjs/common/links';\n\nconst {\n  Instructions: { href: instructionsUrl },\n  Application: { href: feUrl },\n  Api: { href: apiUrl },\n  Swagger: { href: swaggerUrl },\n  Design: { href: designUrl },\n} = LINKS;\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    code: {\n      background: '#001628',\n      color: '#00FF41',\n      padding: '20px',\n      borderRadius: '10px',\n      margin: '30px 0',\n      display: 'block',\n      fontSize: '1rem',\n    },\n  })\n);\n\nconst listOfAllowedComponents = [\n  'Grid',\n  'Progress',\n  'Buttons',\n  'material-icons',\n  'Typography',\n  'Paper',\n];\n\nconst Emoji = ({ children, size = 30 }) => (\n  <span style={{ fontSize: `${size}px` }}>{children}</span>\n);\n\nconst CodeBlock = ({ children }) => {\n  const classes = useStyles();\n  return <code className={classes.code}>{children}</code>;\n};\n\nconst ExternalLink = ({ href, children }) => (\n  <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nconst getInstructionsBasedOnFramework = (framework) => {\n  switch (framework) {\n    case ANGULAR:\n      return (\n        <>\n          <ul>\n            <li>A FE application in angularjs (apps/angularjs)</li>\n            <li>An Express API (apps/api)</li>\n          </ul>\n          <p>\n            At the moment, there isn't any component library for angularjs, if\n            you'd like, you can use any UI framework (i.e. Bootstrap, tailwind\n            etc.).\n          </p>\n        </>\n      );\n    case ANGULARV2:\n      return (\n        <>\n          <ul>\n            <li>\n              A FE application in Angular V2 (apps/fe-wtc-tech-test-angularv2)\n            </li>\n            <li>An Express API (apps/api)</li>\n            <li>E2E tests (apps/fe-wtc-tech-test-angularv2-e2e)</li>\n          </ul>\n          <p>\n            At the moment, there isn't any component library for angularjs, if\n            you'd like, you can use any UI frameworks (i.e. Bootstrap, tailwind\n            etc.).\n          </p>\n        </>\n      );\n    case REACT:\n      return (\n        <section>\n          <ul>\n            <li>A FE application in Next.js (apps/fe-wtc-tech-test)</li>\n            <li>A React library of components (libs/ui)</li>\n            <li>An Express API (apps/api)</li>\n            <li>E2E tests (apps/fe-wtc-tech-test-e2e)</li>\n          </ul>\n          <ul>\n            <li>\n              <h4>\n                <b>In order to speed up development</b>\n              </h4>\n              <p>\n                If you'd like, you can use, change or extend components already\n                present in the ui library. Those we have included, are just a\n                wrapper around the Material UI one, nothing more. You can import\n                them in this way:\n              </p>\n              <p>\n                <CodeBlock>\n                  {\n                    \"import { Button, Progress } from '@mono-nx-test-with-nextjs/ui';\"\n                  }\n                </CodeBlock>\n              </p>\n              <p>\n                Same thing for icons. They can be imported directly as a normal\n                component from the library as:\n              </p>\n              <p>\n                <CodeBlock>\n                  {\n                    \"import {VisibilityIcon} from '@mono-nx-test-with-nextjs/ui';\"\n                  }\n                </CodeBlock>\n              </p>\n              <p>\n                This is the list of the original Material UI components we\n                wrapped:\n              </p>\n              <ul>\n                {listOfAllowedComponents.map((componentName) => (\n                  <li key={componentName}>\n                    <ExternalLink\n                      href={`https://material-ui.com/components/${componentName}/`}\n                    >\n                      {componentName}\n                    </ExternalLink>\n                  </li>\n                ))}\n              </ul>\n              <p>You can also use Material UI Utils.</p>\n              <b>\n                <p>\n                  <b>\n                    Nothing else is allowed from Material UI or extra UI\n                    framework (i.e. Bootstrap). We want you to create new\n                    components.\n                  </b>\n                </p>\n              </b>\n            </li>\n          </ul>\n        </section>\n      );\n\n    default:\n      break;\n  }\n};\n\nconst Instructions = () => {\n  const testNumber = ANSWERS?.testNumber.split(' - ')[0];\n\n  let testInstructions = null;\n  let testTitle = null;\n  if (testNumber) {\n    const { test, title } = TESTS_NUMBERS[Number(testNumber) - 1];\n    testInstructions = test;\n    testTitle = title;\n  }\n\n  return (\n    <main>\n      <h1>Instructions</h1>\n      <p>\n        The idea of this test is to give you something which is as close as\n        possible to a real situation where you have to implement some user\n        stories in a codebase. We believe this is the best way to evaluate a\n        candidate because this is what you will do if you get the job.\n        Hopefully, you will find this test challenging and fun. We do appreciate\n        any feedback, good or bad you might have. Do not hesitate to let us know\n        what you think! Help us improve!\n      </p>\n      <p>Let's begin...</p>\n      <p>This codebase is a mono-repo. At the moment you will find:</p>\n      {ANSWERS && getInstructionsBasedOnFramework(ANSWERS?.framework)}\n      <p>\n        The FE application is already connected to the API (swagger below), so\n        you don't need to worry about that. But there is also a shared library\n        of components which you might want to use. Imagine this a real\n        situation, so when you create a new component, you need to think where\n        to put it. Does it belong to a share component library or in the\n        application?\n      </p>\n      <p>\n        Remember, the API is not persistent, so every time you make a change\n        with PUT etc. it will be saved until you restart.\n      </p>\n      <p>\n        <b>\n          Somebody should have told you which test to do, if you are not sure,\n          please reach out to your recruiter and ask.\n        </b>\n      </p>\n      <p>\n        We are expecting people at any level to be able to delivery any of the\n        below tests. There is no time limit, so you can relax and get it done\n        when you can, it will take you only a few hours. The actual\n        implementation will help us to assess your level more accurately. If we\n        do not like your implementation or how you code and you fail the test,\n        this doesn't make you a bad coder, it is just our own opinion, don't\n        take it personally, we can also make mistakes.\n      </p>\n      <h2>\n        {testNumber\n          ? 'TEST'\n          : \"TESTS (if you don't know the number, please ask your recruiter)\"}\n      </h2>\n      {testNumber ? (\n        <div>\n          <h3>\n            Test {ANSWERS.testNumber}: <b>{testTitle}</b>\n          </h3>\n          <h4>User Stories</h4>\n          {testInstructions}\n        </div>\n      ) : (\n        // fallback in case there is something wrong with the answers file\n        TESTS_NUMBERS.map(({ test, title }, index) => (\n          <div key={title}>\n            <h3>\n              Test {index + 1}: <b>{title}</b>\n            </h3>\n            <h4>User Stories</h4>\n            {test}\n          </div>\n        ))\n      )}\n      <hr />\n      <h3>The git bit</h3>\n      <p>When you commit your code, you need to follow this patter:</p>\n      <p>user story userStoryNumber.taskNumber. For instance:</p>\n      <p>user story 1.1 {'=>'} if you are working on user story 1 task 1</p>\n      <p>user story 1.2 {'=>'} if you are working on user story 1 task 2</p>\n      <p>\n        When you think you are ready for us to review your work, just push your\n        code up and send an email to your recruiter. You can push even if you\n        are not ready yet, we won't review it until you say it is.\n      </p>\n      <hr />\n      <DetailsBox\n        summaryDescription={`What we check when grading your solution`}\n      >\n        <ul>\n          <li>\n            If your solution meets accessibility standards (at least level A)\n          </li>\n          <li>If your solution meets security standards</li>\n          <li>\n            If your solution produces any errors or messages in the console\n          </li>\n          <li>How your solution handles application errors</li>\n          <li>How much your solution follows our instructions</li>\n          <li>If you use any third-parties and why</li>\n          <li>How you structure your code</li>\n          <li>How clean your code is</li>\n          <li>Your attention to details</li>\n          <li>How close to the design your solution is</li>\n          <li>How you write typescript</li>\n          <li>\n            If your solution runs on our machine after following your\n            instructions (if you change anything and diverge from the default\n            behavior)\n          </li>\n        </ul>\n      </DetailsBox>\n      <DetailsBox\n        summaryDescription={`What we DON'T check when grading your solution:`}\n      >\n        <ul>\n          <li>What you choose as CSS methods (BEM, SMACSS, OOCSS, etc.)</li>\n          <li>What you choose as CSS \"tools\" (less, sass, CSS-in-JS)</li>\n          <li>\n            If you add extra functionalities but you don't do 100% of what\n            requested. If you want to impress us, follow our instructions and do\n            things properly (add all the required tests!), that is enough.\n          </li>\n          <li>The time you spend on it</li>\n        </ul>\n      </DetailsBox>\n      <hr />\n      <h3>Requirements</h3>\n      <ul>\n        <li>Your solution should be responsive</li>\n        <li>\n          Your solution should work on all the latest 2 versions of modern\n          browsers:\n          <ul>\n            <li>Chrome</li>\n            <li>Safari</li>\n            <li>Firefox</li>\n            <li>Edge</li>\n          </ul>\n          <p>\n            <b>\n              What about Explorer 11? If your solution supports it, great! Let\n              us know and we will give you extra points, but it is not required.\n            </b>\n          </p>\n        </li>\n        <li>\n          Your solution should handle application errors (No data from API, no\n          images, etc.)\n        </li>\n        <li>\n          You can add other things if you require to (lodash modules, ramda,\n          Redux etc.). If you do, we want to know why.\n        </li>\n        <li>\n          Your solution should include MEANINGFUL tests which test some or all\n          the application's logic. Snapshots tests are fine for presentational\n          components, but they might not be enough in other scenarios. We want\n          to see how you test application logic, we give for granted that you\n          know how to write snapshots tests. We want to know if you understand\n          the difference between unit, integration and end-2-end tests and how\n          you approach it.\n        </li>\n        <li>\n          if you diverge from the default behavior of this repo, you should add\n          at the top or the readme file the new instructions. Please be clear.\n        </li>\n      </ul>\n      <h3>Notes:</h3>\n      <ul>\n        <li>\n          <p>\n            Where you are now is where the instructions <Emoji> &#9881;</Emoji>{' '}\n            page is:{' '}\n            <ExternalLink href={instructionsUrl}>\n              {instructionsUrl}\n            </ExternalLink>\n            {'. '}\n            You can always come back here anytime, just click on the button in\n            the footer. <Emoji>&#128071;</Emoji>\n          </p>\n          <p>\n            The FE application home is exposed at:{' '}\n            <ExternalLink href={feUrl}>{feUrl}</ExternalLink>\n          </p>\n          <p>The FE application home is where you need to put your code!</p>\n        </li>\n        <li>\n          The API is exposed at http://localhost:3333.\n          <p>\n            API's endpoint example (movies):{' '}\n            <ExternalLink href={apiUrl}>{apiUrl}</ExternalLink>\n          </p>\n          <p>\n            <ExternalLink href={swaggerUrl}>API swagger doc</ExternalLink>\n          </p>\n          <p>\n            <b>\n              Remember, you can actually hit the endpoints from the swagger doc\n              to see the data. Click on \"Try it out\" and then execute. You can\n              also play around with params.\n            </b>\n          </p>\n        </li>\n        <li>\n          <p>\n            <ExternalLink href={designUrl}>Design</ExternalLink>\n          </p>\n        </li>\n        <li>\n          To run the unit tests use this command:\n          <p>\n            {`yarn test:${ANSWERS && ANSWERS?.framework.toLocaleLowerCase()}`}\n          </p>\n        </li>\n      </ul>\n      <p>\n        That's it!! Now you can start. We hope you will enjoy this challenge and\n        good luck!\n      </p>\n      <p>\n        <b>\n          01001000 01100001 01110000 01110000 01111001 00100000 01100011\n          01101111 01100100 01101001 01101110 01100111 00100001\n        </b>\n      </p>\n    </main>\n  );\n};\n\nexport default Instructions;\n"]},"metadata":{},"sourceType":"module"}