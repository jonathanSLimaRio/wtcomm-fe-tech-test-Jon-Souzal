{"ast":null,"code":"import { test1 } from './test1';\nimport { test2 } from './test2';\nimport { test3 } from './test3';\nimport TITLES from '../../../../../common/titles.js';\nexport var TESTS_NUMBERS = TITLES.map(_c = function _c(_ref, index) {\n  var title = _ref.title;\n  return {\n    test: [test1, test2, test3][index],\n    title: title\n  };\n});\n_c2 = TESTS_NUMBERS;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TESTS_NUMBERS$TITLES.map\");\n$RefreshReg$(_c2, \"TESTS_NUMBERS\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/jdslima/Desktop/wtcomm-fe-tech-test-Jon-Souzal/apps/instructions/app/components/tests/index.tsx"],"names":["TESTS_NUMBERS","title","test"],"mappings":"AAAA,SAAA,KAAA,QAAA,SAAA;AACA,SAAA,KAAA,QAAA,SAAA;AACA,SAAA,KAAA,QAAA,SAAA;AAEA,OAAA,MAAA,MAAA,iCAAA;AAEA,OAAO,IAAMA,aAAa,GAAG,MAAM,CAAN,GAAA,CAAA,EAAA,GAAW,SAAA,EAAA,CAAA,IAAA,EAAA,KAAA,EAAA;AAAA,MAAGC,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,SAAuB;AAC7DC,IAAAA,IAAI,EAAE,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EADuD,KACvD,CADuD;AAE7DD,IAAAA,KAAK,EAALA;AAF6D,GAAvB;AAAjC,CAAsB,CAAtB;MAAMD,a","sourcesContent":["import { test1 } from './test1';\nimport { test2 } from './test2';\nimport { test3 } from './test3';\n\nimport TITLES from '../../../../../common/titles.js';\n\nexport const TESTS_NUMBERS = TITLES.map(({ title }, index) => ({\n  test: [test1, test2, test3][index],\n  title,\n}));\n"]},"metadata":{},"sourceType":"module"}